//
//  NewTrackerViewPresenter.swift
//  Tracker
//
//  Created by –°–µ—Ä–≥–µ–π –ö—É—Ö–∞—Ä–µ–≤ on 12.08.2024.
//

import UIKit

final class NewTrackerViewPresenter: NSObject, NewTrackerViewPresenterProtocol {
    // MARK: - Types

    enum NewTrackerErrors: Error {
        case canNotSaveTracker
    }

    // MARK: - Public Properties

    weak var viewController: NewTrackerViewPresenterDelegate?
    weak var delegate: TrackersViewPresenterProtocol?

    // MARK: - Private Properties

    /// –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    private var categoryName: String? = "–í–∞–∂–Ω–æ–µ"
    /// –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞
    private var trackerName: String?
    /// –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞
    private var schedule: Set<Weekday> = []

    // MARK: - Public Methods

    func canSaveTracker() -> Bool {
        guard
            let trackerType = viewController?.trackerType,
            let categoryName = categoryName,
            let trackerName = trackerName
        else {
            return false
        }
        let trackerCategoryIsCorrect = !categoryName.isEmpty
        let trackerNameIsCorrect = !trackerName.isEmpty && trackerName.count < 38
        switch trackerType {
        case .habit:
            let trackerscheduleIsCorrect = !schedule.isEmpty
            if  trackerCategoryIsCorrect && trackerNameIsCorrect && trackerscheduleIsCorrect { return true }
        case .event:
            if trackerCategoryIsCorrect && trackerNameIsCorrect { return true }
        }
        return false
    }

    func processTrackersName(_ trackerName: String?) {
        self.trackerName = trackerName
        guard let textLength = trackerName?.count else { return }
        if textLength > 38 {
            viewController?.showTrackersNameViolation()
        } else {
            viewController?.hideTrackersNameViolation()
        }
        configureCreateButton()
    }

    func saveTracker(_ completion: @escaping (Result<Void, any Error>) -> Void) {
        if !canSaveTracker() {
            completion(.failure(NewTrackerErrors.canNotSaveTracker))
        } else {
            completion(.success(()))
            delegate?.trackerDidRecorded(
                trackerCategory: categoryName ?? "",
                tracker: Tracker(
                    id: UUID(),
                    name: trackerName ?? "",
                    color: .appColorSection1,
                    emoji: "üëç",
                    schedule: schedule
                )
            )
        }
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    /// - Parameters:
    ///   - tableView: —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ///   - section: –∏–Ω–¥–µ–∫—Å —Å–µ–∫—Ü–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
    /// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –ø–∞–Ω–µ–ª–∏
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let viewController = viewController else { return 0 }
        switch viewController.trackerType {
        case .none:
            return 0
        case .habit:
            return 2
        case .event:
            return 1
        }
    }

    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    /// - Parameters:
    ///   - tableView: —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ///   - indexPath: –∏–Ω–¥–µ–∫—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –∫–Ω–æ–ø–∫–∏
    /// - Returns: —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ –≥–æ—Ç–æ–≤—É—é –∫ –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫—É
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: TrackerButtonsCell.Constants.identifier, for: indexPath)
        guard let buttonsCell = cell as? TrackerButtonsCell else {
            print(#fileID, #function, #line, "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤")
            return UITableViewCell()
        }
        configureTrackerButtonCell(tableView, for: buttonsCell, with: indexPath)
        return buttonsCell
    }

    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (—è—á–µ–π–∫–∏)
    /// - Parameters:
    ///   - tableView: —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ///   - indexPath: –∏–Ω–¥–µ–∫—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –∫–Ω–æ–ø–∫–∏
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        } else {
            showTrackerSchedule()
        }
    }

    func updateTrackerSchedule(with schedule: Set<Weekday>) {
        self.schedule = schedule
        configureCreateButton()
        viewController?.updateButtonsPanel()
    }

    // MARK: - Private Methods

    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–Ω–æ—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Ç—Ä–µ–∫–µ—Ä–∞
    private func configureCreateButton() {
        if canSaveTracker() {
            viewController?.setCreateButtonEnable()
        } else {
            viewController?.setCreateButtonDisable()
        }
    }

    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫
    /// - Parameters:
    ///   - tableView: —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ///   - cell: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∫–Ω–æ–ø–∫–∞
    ///   - indexPath: –∏–Ω–¥–µ–∫—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –∫–Ω–æ–ø–∫–∏
    private func configureTrackerButtonCell(_ tableView: UITableView, for cell: TrackerButtonsCell, with indexPath: IndexPath) {
        if indexPath == tableView.lastCellIndexPath {
            cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.bounds.width + 1, bottom: 0, right: 0)
        } else {
            cell.separatorInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
        }
        cell.accessoryType = .disclosureIndicator
        if indexPath.row == 0 {
            cell.configureButton(title: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", subTitle: categoryName)
        } else {
            cell.configureButton(title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", subTitle: getTrackerScheduleTitle())
        }
    }

    private func getTrackerScheduleTitle() -> String? {
        if schedule.isEmpty { return nil }
        if schedule.count == 7 { return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å" }

        var scheduleTitle = ""
        if schedule.contains(.monday) { scheduleTitle += "–ü–Ω, " }
        if schedule.contains(.tuesday) { scheduleTitle += "–í—Ç, " }
        if schedule.contains(.wednesday) { scheduleTitle += "–°—Ä, " }
        if schedule.contains(.thursday) { scheduleTitle += "–ß—Ç, " }
        if schedule.contains(.friday) { scheduleTitle += "–ü—Ç, " }
        if schedule.contains(.saturday) { scheduleTitle += "–°–±, " }
        if schedule.contains(.sunday) { scheduleTitle += "–í—Å, " }

        return String(scheduleTitle.dropLast(2))
    }

    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    private func showTrackerSchedule() {
        guard let viewController = viewController as? UIViewController else { return }
        let scheduleViewPresenter = ScheduleViewPresenter()
        scheduleViewPresenter.showTrackerSchedule(with: schedule, on: viewController, by: self)
    }
}
