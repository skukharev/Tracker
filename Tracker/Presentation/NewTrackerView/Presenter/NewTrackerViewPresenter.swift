//
//  NewTrackerViewPresenter.swift
//  Tracker
//
//  Created by –°–µ—Ä–≥–µ–π –ö—É—Ö–∞—Ä–µ–≤ on 12.08.2024.
//

import UIKit

final class NewTrackerViewPresenter: NewTrackerViewPresenterProtocol {
    // MARK: - Types

    enum NewTrackerErrors: Error {
        case canNotSaveTracker
    }

    // MARK: - Constants

    /// –ú–∞—Å—Å–∏–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —ç–º–æ–¥–∂–∏ —Ç—Ä–µ–∫–µ—Ä–∞
    let emojies = ["üôÇ", "üòª", "üå∫", "üê∂", "‚ù§Ô∏è", "üò±", "üòá", "üò°", "ü•∂", "ü§î", "üôå", "üçî", "ü•¶", "üèì", "ü•á", "üé∏", "üèù", "üò™"]

    let colors = {
        var colors: [UIColor] = []
        for i in 1...18 {
            colors.append(UIColor(named: "App Color Section " + i.intToString) ?? .appColorSection1)
        }
        return colors
    }()

    // MARK: - Public Properties

    /// –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—å—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    weak var viewController: NewTrackerViewPresenterDelegate?
    weak var delegate: AddTrackerViewPresenterDelegate?

    // MARK: - Private Properties

    /// –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    private var categoryName: String? = "–í–∞–∂–Ω–æ–µ"
    /// –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞
    private var trackerName: String?
    /// –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞
    private var schedule: Week = []
    /// –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–º–æ–¥–∂–∏ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞
    private var emoji: String?
    /// –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ç—Ä–µ–∫–µ—Ä–∞
    private var color: UIColor?

    // MARK: - Public Methods

    func canSaveTracker() -> Bool {
        guard
            let trackerType = viewController?.trackerType,
            let categoryName = categoryName,
            let trackerName = trackerName,
            let emoji = emoji,
            color != nil
        else {
            return false
        }
        let trackerCategoryIsCorrect = !categoryName.isEmpty
        let trackerNameIsCorrect = !trackerName.isEmpty && trackerName.count < 38
        let trackerEmojiIsCorrect = !emoji.isEmpty
        switch trackerType {
        case .habit:
            let trackerscheduleIsCorrect = !schedule.isEmpty
            if  trackerCategoryIsCorrect && trackerNameIsCorrect && trackerscheduleIsCorrect && trackerEmojiIsCorrect { return true }
        case .event:
            if trackerCategoryIsCorrect && trackerNameIsCorrect && trackerEmojiIsCorrect { return true }
        }
        return false
    }

    func configureTrackerButtonCell(_ tableView: UITableView, for cell: TrackerButtonsCell, with indexPath: IndexPath) {
        if indexPath == tableView.lastCellIndexPath {
            cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.bounds.width + 1, bottom: 0, right: 0)
        } else {
            cell.separatorInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
        }
        cell.accessoryType = .disclosureIndicator
        if indexPath.row == 0 {
            cell.configureButton(title: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", subTitle: categoryName)
        } else {
            cell.configureButton(title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", subTitle: getTrackerScheduleTitle())
        }
    }

    func processColor(_ color: UIColor) {
        self.color = color
        configureCreateButton()
    }

    func processEmoji(_ emoji: String) {
        self.emoji = emoji
        configureCreateButton()
    }

    func processTrackersName(_ trackerName: String?) {
        self.trackerName = trackerName
        guard let textLength = trackerName?.count else { return }
        if textLength > 38 {
            viewController?.showTrackersNameViolation()
        } else {
            viewController?.hideTrackersNameViolation()
        }
        configureCreateButton()
    }

    func showColorCell(for cell: NewTrackerColorCell, at indexPath: IndexPath, withSelection selection: Bool) {
        guard let color = colors[safe: indexPath.row] else {
            assertionFailure("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤: –∏—Å–∫–æ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É —Ü–≤–µ—Ç–∞ \(indexPath.row)")
            return
        }
        let cellViewModel = NewTrackerColorCellModel(color: color, isSelected: selection)
        cell.showCellViewModel(cellViewModel)
    }

    func showEmojiCell(for cell: NewTrackerEmojiCell, at indexPath: IndexPath, withSelection selection: Bool = false) {
        guard
            let emoji = emojies[safe: indexPath.row] else {
            assertionFailure("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–∞ —ç–º–æ–¥–∂–∏: –∏—Å–∫–æ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É —ç–º–æ–¥–∂–∏ \(indexPath.row)")
            return
        }
        let cellViewModel = NewTrackerEmojiCellModel(emoji: emoji, isSelected: selection)
        cell.showCellViewModel(cellViewModel)
    }

    func saveTracker(_ completion: @escaping (Result<Void, any Error>) -> Void) {
        if !canSaveTracker() {
            completion(.failure(NewTrackerErrors.canNotSaveTracker))
        } else {
            completion(.success(()))
            delegate?.trackerDidRecorded(
                trackerCategory: categoryName ?? "",
                tracker: Tracker(
                    id: UUID(),
                    name: trackerName ?? "",
                    color: color ?? UIColor(),
                    emoji: emoji ?? "",
                    schedule: schedule
                )
            )
        }
    }

    func showTrackerSchedule() {
        guard let viewController = viewController as? UIViewController else { return }
        let targetViewController = ScheduleScreenAssembley.build(withDelegate: self, forSchedule: schedule)
        let router = Router(viewController: viewController, targetViewController: targetViewController)
        router.showNext(dismissCurrent: false)
    }

    func updateTrackerSchedule(with schedule: Week) {
        self.schedule = schedule
        configureCreateButton()
        viewController?.updateButtonsPanel()
    }

    // MARK: - Private Methods

    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–Ω–æ—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Ç—Ä–µ–∫–µ—Ä–∞
    private func configureCreateButton() {
        if canSaveTracker() {
            viewController?.setCreateButtonEnable()
        } else {
            viewController?.setCreateButtonDisable()
        }
    }

    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä–∞
    /// - Returns: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–Ω–µ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    private func getTrackerScheduleTitle() -> String? {
        if schedule.isEmpty { return nil }
        if schedule.count == 7 { return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å" }

        var scheduleTitle = ""
        if schedule.contains(.monday) { scheduleTitle += "–ü–Ω, " }
        if schedule.contains(.tuesday) { scheduleTitle += "–í—Ç, " }
        if schedule.contains(.wednesday) { scheduleTitle += "–°—Ä, " }
        if schedule.contains(.thursday) { scheduleTitle += "–ß—Ç, " }
        if schedule.contains(.friday) { scheduleTitle += "–ü—Ç, " }
        if schedule.contains(.saturday) { scheduleTitle += "–°–±, " }
        if schedule.contains(.sunday) { scheduleTitle += "–í—Å, " }

        return String(scheduleTitle.dropLast(2))
    }
}
